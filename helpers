<?php  if ( ! defined('BASEPATH')) exit('No direct script access allowed');
/**
 * Classe responsável pela visão das licitações
 * Responsábilidade de mapeas as licitações do banco de dados
 * 
 * @author Ediaimo Borges
 * @version 1.0
 * @access public
 * @package Projeto Licitação
 * @subpackage licitacao
 * @example Classe licitacaoModel();
*/

class Licitacao_model extends CI_Model {
	
	/**
 	* Função que mapea a tabela de licitação
 	* @access public
 	* @param $id_modalidade Variavel que é enviada para consultar as licitações a partir da modalidade
 	* @return Array de objeto
	*/	
	public function obter_licitacoes($modalidade, $limit_final = null, $limit_start = null, $status = null) {
		$this->db->select('num_licitacao, ano_licitacao, dt_abertura, objeto, fk_cod_status_licitacao, mod_licitacao.apelido, mod_licitacao.descricao as tipo, hora_abertura_edital as hora');
		if($modalidade !== "" ){
			$this->db->where('apelido',$modalidade);	
		}
		if($status !== null) {
			$this->db->where('fk_cod_status_licitacao', $status);
		};
		$query = $this->db->join('mod_licitacao', "mod_licitacao.id = licitacao.cod_modalidade")
					  ->limit($limit_final, $limit_start)
					  ->order_by('dt_abertura', 'asc')
					  ->get('licitacao');
		if($query->num_rows() > 0) {
			return $query->result();
		} else {
			return FALSE;
		}
		return FALSE;
	}
	
	/**
 	* Função conta a quantidade de itens da tabela licitação
 	* @access public
 	* @param $id_modalidade Variavel que é enviada para consultar as licitações a partir da modalidade
 	* @return Array de objeto
	*/
	public function licitacao($modalidade, $status) {
		if($modalidade !== "")	{
			$this->db->where('apelido',$modalidade);
		};
		if($status != null) {
			$this->db->where('fk_cod_status_licitacao', $status);
		};
		$query = $this->db->join('mod_licitacao', "mod_licitacao.id = licitacao.cod_modalidade")
			->get('licitacao');
		if($query->num_rows() > 0) {
			return $query->result();
		} else {
			return null;
		}
		
		return null;
	}
	/**
 	* Método que retonra a licitação
 	* @access public
 	* @param $id_modalidade Variavel que é enviada para consultar as licitações a partir da modalidade
 	* @return Array de objeto
	*/
	public function obter_licitacao($num_licitacao) {
		$query = $this->db
			->select('id_licitacao, mod_licitacao.descricao as tipo, num_licitacao, objeto, vlr_estimado, dt_abertura, localizacao, ano_licitacao, nome_arquivo, num_edital, data_previsao_publ, permite_consorcio, possui_garantia, valor_garantia, data_limite_esclarecimento, prazo_execucao, tipo_prazo.descricao as periodo, hora_abertura_edital as hora') 
			->where('num_licitacao', $num_licitacao)
			->join('mod_licitacao', "mod_licitacao.id = licitacao.cod_modalidade")
			->join('tipo_prazo', 'tipo_prazo.id = licitacao.fk_cod_tipo_prazo_execucao')
			->get('licitacao');	
		if($query->num_rows() > 0) {
			return $query->row();
		} else {
			return FALSE;
		}
		return FALSE;
	}
	/**
 	* Método que retonra a licitação
 	* @access public
 	* @param $id_modalidade Variavel que é enviada para consultar as licitações a partir da modalidade
 	* @return Array de objeto
	*/
	public function buscar_licitacao ($p, $limit_final, $limit_start) {
		$p = $this->_removeString($p);
		$remove = array('"', "'" );
		$replace = array('\"', "\'");
		$p = str_replace($remove, $replace, $p);
		if(empty($p)) {
			return false;
		};
		$query = ('SELECT DISTINCT id_licitacao, mod_licitacao.descricao AS tipo, mod_licitacao.apelido, num_licitacao, objeto , vlr_estimado, dt_abertura , localizacao, ano_licitacao');
		$query .= (' FROM licitacao');
		$query .= (' JOIN mod_licitacao ON mod_licitacao.id = licitacao.cod_modalidade ');
		for ($i=0; $i < count($p); $i++) {
			if(is_numeric($p[$i])) {
				$query .= ('WHERE num_licitacao = '. (int)$p[$i]);
			} else {
				if($i == 0) {
					$query .=(' WHERE objeto ILIKE \'%'.addslashes($p[$i]).'%\'');
				} else {
					$query .=(' OR objeto ILIKE \'%'.addslashes($p[$i]).'%\' ');	
				}
			}
		}
		$query .= (' LIMIT '. $limit_final . ' OFFSET ' . $limit_start);
		$query .= (';');
		$query = $this->db->query($query);
		if($query->num_rows() > 0) {
			return $query->result();
		} else {
			return FALSE;
		}
		return FALSE;
	}
	
	public function _removeString($string) {
		$sub = explode(" ", $string );
		$preposicao = array(
					'/^da$/i', 
					'/^das$/i', 
					'/^de$/i', 
					'/^do$/i', 
					'/^dos$/i', 
					'/^por$/i',
					'/^para$/i',
					'/^perante$/i',
					'/^a$/i',
					'/^as$/i',
					'/^e$/i',
					'/^é$/i',
					'/^o$/i',
					'/^ao$/i',
					'/^aos$/i',
					'/^ante$/i',
					'/^até$/i',
					'/^ate$/i',
					'/^após$/i',
					'/^apos$/i',
					'/^desde$/i',
					'/^em$/i',
					'/^entre$/i',
					'/^com$/i',
					'/^contra$/i',
					'/^sem$/i',
					'/^sob$/i',
					'/^trás$/i',
					'/^tras$/i',
					'/^fora$/i',
					'/^na$/i',
					'/^nas$/i',
					'/^no$/i',
					'/^nos$/i',
				);
		for ($i=0; $i < count($sub); $i++) { 
			if(preg_replace($preposicao, "", $sub[$i]) != "") {
				$string_array[] = preg_replace($preposicao, "", $sub[$i]);
			};
		};
		if(empty($string_array)) {
			return false;
		}
		return $string_array;
	}
	
	public function log_download( $id_licitacao = null ) {
		
		if( $id_licitacao == null ){
			return false;
		}
		$dados = array(
						'dow_edi_ip' => $_SERVER['REMOTE_ADDR'],
						'cod_licitacao' => $id_licitacao,
						'cod_usuario' => $this->session->userdata('sit_usu_id')
		);
	
		$this->db->insert('download_edital', $dados);
		if($this->db->affected_rows() > 0) {
			return true;
		} else {
			return false;
		}
		//return $this->db->insert('download_edital', $dados);
	}
	/**
 	* Método que retonra os status da licitação
 	* @access public
 	* @return Array de objeto
	*/
	public function status_licitacao() {
		$query = $this->db
						->order_by('id_status_licitacao')
						->get('status_licitacao');
		return $query->result();
	}
	
	/**
 	* Método que retorna os anexos extras da licitação
 	* @access public
	* @Param  $id_licitacao = Id da licitacação
 	* @return Array de objeto
	*/
	public function anexos($id_licitacao) {
		$query = $this->db
					  ->where('fk_cod_licitacao', $id_licitacao)
					  ->order_by('data_upload', 'desc')
					  ->get('dados_anexos');
		if($query->num_rows() > 0) {
			return $query->result();
		}
		return false;
	}
	
}
